<h3>King Kong API Docs - Guide to Source Code</h3>
<pre>
    Overview
    --------
    - index.html: Contains main application CANVAS, Preloader container, script tags load stylesheet and dependencies then calls Main.init();
    - Main.js: Entry Point
    - Game.js: Creates GameComponents, Preloader, ServerInterface, SignalDispatcher for wiring events etc.
    - Preloader: Loads Game Assets and updates preloader element with progress.
    - setup.json: The Main configuration file, defining assets location, game rules, scaling and position information.
    - ServerInterface: A bridge between the application and the server. Calls are made to the server via this class.
    - SignalDispather: The internal wiring for Components to talk to one another in a loosly coupled way.
    - GameComponents: These are modularised View Containers which extend the createjs.Container class.
        They are added to the stage, and they are stored in G.Utils.gameCompeonts for easy access
        eg. ReelsComponent: creates a Reel for the number of Reels defined in setup.
        eg. DJ: GameComponent responsible for playing sounds.  Can be called directly or when a playSound signal is dispatched.

    3rd Party Dependencies:
    -----------------------
    ##Application:
    Signals - the core event framework
    Proton - the particle animation framework.
    Createjs - The Rendering framework, the class inheritence pattern, the Preloader, the Sound Manager, the Tweening Framework.
    Fetch - The REST API: A cross browser Polyfill.
    Hammerjs - For responding to user touch gestures on touch enabled devices.
    - See bower.json for more.

    ##Development:
    Jasmine - The client side unit testing framework
    Mocha - The server side unit testing framework
    - See bower.json for more.


Changelog
---------


####v0.3.3
- spin evaluation got smarter, win anims should show for all gaffs
- new spin evaluation and tests for symbol wins
- refactoring of CommandQueue queue
- simplified gameComponents wiring in Game.. now game components wire themselves


####v0.3.2
- spin evaluation now detects big win
- initial win anims introduced based on new node system
- preloading new assets
- jpg sprite sheet
- parse url params for testing
- refactor of core components
- all gaffs added to menu
- client side gaffing
- client side m1 reintroduced
- custom command
- replacements implemented
- fixed linting, cleaned Gruntfile
- reels changed to reflect new cut size, server tests introduced
- reels can now be displayed in node in an ascii table)
- supports.json file added (describes device groups and supported features)
- client-side m1 gaff updated
- new symbol data based on original symbol.txt used in setup.json
- currency add
- reset createjs.Ticker timing mode to default, it's better in ios safari
- fixed 1fps prob
- texture command change, all keys forced to lower case to avoid problem with mixed case filenames in symbols

####v0.3.1
- initial gaffs added to gaff menu
- reel strip animations refactored to support node requests, and custom cut length symbols
- new class: CustomCommand (to make fake Win Animations easier)
- before lotsofWin (for symbolAnimation comparison)
- node: stops added to json
- node: all gaffs added to api
- node: proper reel strip data from shadow of the panther used
- node: mocha introduced (allows server side tests)

####v.0.3.0
- docs expanded (homepage and clearer core classes clearer)
- Basic Node server implemented to respond slotInit and spinResponse jsons via REST api
- Symbol Win Spritesheet missing win anims inserted.
- preloader refactor + tests
- easel-packer now populates speed, endFrame, and the short + resume animations
- new assets
- new symbol export
- audio
- change css
- fixed layout on preloader

####v.0.2.3
- Moved Game Setup into Game.js
- Implemented celebration Fireworks
- Implemented Failsafe Loading (longer initialisation for more reliable anim loading)
- spritesheets for caching paylines implemented
- Added Tests and Docs Links to Gaff Menu
- Added MeterComponent consisting of balance/win rollups
- new class: DJ
- timerMode RAF sync implemented
- desktopView
- fixed landscape 404
- devicejs introduced: device detection script
- Game function refactoring
- migrated ticker and other game specific things to Game
- new vagrantfile

####v0.2.2
- Introduced Proton particle animation system
- imagediff introduced and symbol bitmaps test implemented
- vagrant bootstrap
- version injection
- fixed CommandQueue loop

####v0.2.1
- gaff line 1 implemented
- css overlay
- corrections to pay line drawing and pre-init rendering
- implemented cheaper winline shadows (better on mobile)
-

####v0.2.0
- scaling introduced
- reels can now modify symbols dynamically
- reel spin dev mode introduced
- lua code added to src
- gaff menu and normal win implemented
- lots grunt tasks added to support development

####v0.1.0
- removed jquery
- flush command queue when spinning
- bower dependency management introduced
- package structure introduced
- Symbol Win Animations introduced
- yuidocs introduced

####v0.0.6-v0.0.2
- vendor cleanup
- removed js-signals (duplicate dependency)
- GameComponent super class introduced
- js-hint fixes
- WinLines introduced
- Spin Animation features stop where you want
- CommandQueue implemented
- 90% core classes test coverage
- Preloader
- gas pedal infinite spin demo
- initial spritesheet sources
- texture packer data grunt helper
- new class structure

###v0.0.1
- first commit
- node app skeleton initial commit
- linting, concat, uglifying setup
</pre>
